From 7b4208b3cfac4766a8786776d67135da059df848 Mon Sep 17 00:00:00 2001
From: Ashwin H <Ashwin.H@amd.com>
Date: Tue, 27 Jun 2023 06:21:28 +0000
Subject: [PATCH 10/14] Handle SError interrupt of type Decode Error.

On Elba, an access to an invalid bus address results in a Decode SError
that will panic the kernel.Bugs in the HAL that cause these are very
hard to debug, so trap these and if coming from user space, turn the
Decode Error into SIGBUS.  Otherwise, if coming from the kernel, ignore.
---
 arch/arm64/include/asm/traps.h  |  1 +
 arch/arm64/kernel/traps.c       |  8 ++++++++
 drivers/soc/pensando/cap_pcie.c | 22 ++++++++++++++++++++++
 3 files changed, 31 insertions(+)

diff --git a/arch/arm64/include/asm/traps.h b/arch/arm64/include/asm/traps.h
index d96dc2c7c..dc929a6c5 100644
--- a/arch/arm64/include/asm/traps.h
+++ b/arch/arm64/include/asm/traps.h
@@ -29,6 +29,7 @@ void arm64_notify_segfault(unsigned long addr);
 void arm64_force_sig_fault(int signo, int code, void __user *addr, const char *str);
 void arm64_force_sig_mceerr(int code, void __user *addr, short lsb, const char *str);
 void arm64_force_sig_ptrace_errno_trap(int errno, void __user *addr, const char *str);
+int platform_serror(struct pt_regs *regs, unsigned int esr);
 
 /*
  * Move regs->pc to next instruction and do necessary setup before it
diff --git a/arch/arm64/kernel/traps.c b/arch/arm64/kernel/traps.c
index 2059d8f43..d60c3068b 100644
--- a/arch/arm64/kernel/traps.c
+++ b/arch/arm64/kernel/traps.c
@@ -870,8 +870,16 @@ bool arm64_is_fatal_ras_serror(struct pt_regs *regs, unsigned int esr)
 	}
 }
 
+int __weak platform_serror(struct pt_regs *regs, unsigned int esr)
+{
+	return 0;
+}
+
 asmlinkage void noinstr do_serror(struct pt_regs *regs, unsigned int esr)
 {
+	if (platform_serror(regs, esr))
+		return;
+
 	arm64_enter_nmi(regs);
 
 	/* non-RAS errors are not containable */
diff --git a/drivers/soc/pensando/cap_pcie.c b/drivers/soc/pensando/cap_pcie.c
index 506f2ed6c..a7a87ea63 100644
--- a/drivers/soc/pensando/cap_pcie.c
+++ b/drivers/soc/pensando/cap_pcie.c
@@ -76,6 +76,28 @@ static int pciep_access_in_progress(void)
 	return 0;
 }
 
+int platform_serror(struct pt_regs *regs, unsigned int esr)
+{
+    if (pciep_access_in_progress())
+        return 1;
+
+    if ((esr >> 26) == 0x2f && (esr & 0x3) == 0x0) { /* Decode Error */
+        if (user_mode(regs)) {
+            struct task_struct *tsk = current;
+
+            pr_info("%s[%d]: serror converted to bus error\n",
+                tsk->comm, task_pid_nr(tsk));
+            force_signal_inject(SIGBUS, BUS_ADRERR, regs->pc, esr);
+        } else {
+            /* ignore */
+            pr_info("ignoring serror decode-error in kernel mode\n");
+        }
+        return 1;
+    }
+
+    return 0;
+}
+
 static void pciep_access_begin(const u64 pciepa)
 {
 	struct pciedev_info *pi = &pciedev_info;
-- 
2.17.1

